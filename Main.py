import base64

# اسکریپت انکود شده به صورت Base64
encoded_script = """

"""

# دیکود کردن اسکریپت انکود شده
decoded_script = base64.b64decode(encoded_script).decode('utf-8')

# نمایش اسکریپت دیکود شده برای بررسی (اختیاری)
print("Decoded script:\n", decoded_script)

# اجرای اسکریپت دیکود شده
exec(decoded_script)
